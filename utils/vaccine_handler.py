import json
import os

def load_vaccine_data():
    """Load vaccine data from JSON file"""
    try:
        with open('data/vaccines.json', 'r', encoding='utf-8') as f:
            vaccines = json.load(f)
        
        with open('data/phrases.json', 'r', encoding='utf-8') as f:
            phrases = json.load(f)
            
        return vaccines, phrases
    except Exception as e:
        print(f"Error loading vaccine data: {e}")
        return {}, {}

def get_vaccine_info(vaccine_name=None, language='english'):
    """Get vaccination information in specified language"""
    vaccines, phrases = load_vaccine_data()
    
    if not vaccine_name or vaccine_name.lower() in ['baby', 'schedule', 'complete', 'all']:
        # Return complete vaccination schedule
        if 'complete_schedule' in vaccines:
            response = vaccines['complete_schedule'][language]
        else:
            response = get_complete_schedule_manual(vaccines, language)
    else:
        # Return specific vaccine information
        vaccine_name = vaccine_name.lower().replace(' ', '_')
        
        # Handle vaccine name variations
        vaccine_mapping = {
            'bcg': 'bcg',
            'polio': 'opv',
            'opv': 'opv',
            'dpt': 'dpt',
            'diphtheria': 'dpt',
            'pertussis': 'dpt', 
            'tetanus': 'dpt',
            'measles': 'measles',
            'hepatitis': 'hepatitis_b',
            'hepatitis_b': 'hepatitis_b'
        }
        
        matched_vaccine = None
        for key, value in vaccine_mapping.items():
            if key in vaccine_name:
                matched_vaccine = value
                break
        
        if matched_vaccine and matched_vaccine in vaccines:
            vaccine_info = vaccines[matched_vaccine]
            response = format_single_vaccine_response(matched_vaccine, vaccine_info, language)
        else:
            response = get_vaccine_not_found_response(language)
    
    # Add disclaimer
    response += "\n\n" + phrases['disclaimers']['medical_advice'][language]
    
    return response

def format_single_vaccine_response(vaccine_name, vaccine_info, language):
    """Format response for a single vaccine"""
    vaccine_names = {
        'bcg': {'odia': 'BCG', 'english': 'BCG', 'hindi': 'BCG'},
        'opv': {'odia': 'OPV (рмкрнЛрм▓рм┐рмУ)', 'english': 'OPV (Polio)', 'hindi': 'OPV (рдкреЛрд▓рд┐рдпреЛ)'},
        'dpt': {'odia': 'DPT', 'english': 'DPT', 'hindi': 'DPT'},
        'measles': {'odia': 'рм╣рморнНрмк рмЯрм┐рмХрм╛', 'english': 'Measles Vaccine', 'hindi': 'рдЦрд╕рд░рд╛ рдЯреАрдХрд╛'},
        'hepatitis_b': {'odia': 'рм╣рнЗрмкрм╛рмЯрм╛рмЗрмЯрм┐рм╕рнН B', 'english': 'Hepatitis B', 'hindi': 'рд╣реЗрдкреЗрдЯрд╛рдЗрдЯрд┐рд╕ B'}
    }
    
    templates = {
        'odia': f"ЁЯТЙ {vaccine_names.get(vaccine_name, {}).get('odia', vaccine_name.upper())} рмЯрм┐рмХрм╛:\nЁЯУЕ рм╕рморнЯ: {vaccine_info.get('age_odia', '')}\nЁЯЫбя╕П {vaccine_info.get('description_odia', '')}",
        'english': f"ЁЯТЙ {vaccine_names.get(vaccine_name, {}).get('english', vaccine_name.upper())} Vaccine:\nЁЯУЕ Age: {vaccine_info.get('age_english', '')}\nЁЯЫбя╕П {vaccine_info.get('description_english', '')}",
        'hindi': f"ЁЯТЙ {vaccine_names.get(vaccine_name, {}).get('hindi', vaccine_name.upper())} рдЯреАрдХрд╛:\nЁЯУЕ рдЙрдореНрд░: {vaccine_info.get('age_hindi', '')}\nЁЯЫбя╕П {vaccine_info.get('description_hindi', '')}"
    }
    
    return templates.get(language, templates['english'])

def get_complete_schedule_manual(vaccines, language):
    """Generate complete schedule manually if not in data"""
    schedules = {
        'odia': "рм╢рм┐рм╢рнБ рмЯрм┐рмХрм╛ рмХрм╛рм░рнНрмпрнНрнЯрм╕рнВрмЪрнА:\nЁЯФ╕ рмЬрмирнНрмо рм╕рморнЯрм░рнЗ: BCG + Hepatitis B\nЁЯФ╕ рнм рм╕рмкрнНрмдрм╛рм╣рм░рнЗ: OPV + DPT + Hepatitis B\nЁЯФ╕ рнзрнж рм╕рмкрнНрмдрм╛рм╣рм░рнЗ: OPV + DPT\nЁЯФ╕ рнзрнк рм╕рмкрнНрмдрм╛рм╣рм░рнЗ: OPV + DPT + Hepatitis B\nЁЯФ╕ рнп рморм╛рм╕рм░рнЗ: Measles\n\nрмирм┐рмХрмЯрм╕рнНрме рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯрмХрнЗрмирнНрмжрнНрм░рм░рнЗ рмпрнЛрмЧрм╛рмпрнЛрмЧ рмХрм░рмирнНрмдрнБред",
        'english': "Baby Vaccination Schedule:\nЁЯФ╕ At Birth: BCG + Hepatitis B\nЁЯФ╕ 6 Weeks: OPV + DPT + Hepatitis B\nЁЯФ╕ 10 Weeks: OPV + DPT\nЁЯФ╕ 14 Weeks: OPV + DPT + Hepatitis B\nЁЯФ╕ 9 Months: Measles\n\nContact your nearest health center.",
        'hindi': "рдмрдЪреНрдЪреЗ рдХреА рдЯреАрдХрд╛рдХрд░рдг рддрд╛рд▓рд┐рдХрд╛:\nЁЯФ╕ рдЬрдиреНрдо рдкрд░: BCG + Hepatitis B\nЁЯФ╕ 6 рд╕рдкреНрддрд╛рд╣: OPV + DPT + Hepatitis B\nЁЯФ╕ 10 рд╕рдкреНрддрд╛рд╣: OPV + DPT\nЁЯФ╕ 14 рд╕рдкреНрддрд╛рд╣: OPV + DPT + Hepatitis B\nЁЯФ╕ 9 рдорд╣реАрдиреЗ: Measles\n\nрдЕрдкрдиреЗ рдирдЬрджреАрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
    }
    
    return schedules.get(language, schedules['english'])

def get_vaccine_not_found_response(language):
    """Return response when vaccine is not found"""
    responses = {
        'odia': "рмжрнБрмГрмЦрм┐рмд, рмПрм╣рм┐ рмЯрм┐рмХрм╛ рммрм┐рм╖рнЯрм░рнЗ рморнЛрм░ рм╕рнВрмЪрмирм╛ рмирм╛рм╣рм┐рмБред рморнБрмБ BCG, OPV, DPT, Measles, Hepatitis B рммрм┐рм╖рнЯрм░рнЗ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рмкрм╛рм░рм┐рммрм┐ред",
        'english': "Sorry, I don't have information about this vaccine. I can help with BCG, OPV, DPT, Measles, Hepatitis B vaccines.",
        'hindi': "рдЦреБрд╢реА, рдореБрдЭреЗ рдЗрд╕ рдЯреАрдХреЗ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рд╣реИред рдореИрдВ BCG, OPV, DPT, рдЦрд╕рд░рд╛, рд╣реЗрдкреЗрдЯрд╛рдЗрдЯрд┐рд╕ B рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред"
    }
    return responses.get(language, responses['english'])

def get_vaccination_reminder(language):
    """Get vaccination reminder message"""
    reminders = {
        'odia': "ЁЯТб рмормирнЗрм░рмЦрмирнНрмдрнБ: рм╕рморнЯрм░рнЗ рмЯрм┐рмХрм╛ рмжрнЗрммрм╛ рмЕрмдрнНрнЯрмирнНрмд рмЬрм░рнБрм░рнАред рмЯрм┐рмХрм╛ рмХрм╛рм░рнНрмб рм╕рм╛рмЩрнНрмЧрм░рнЗ рм░рмЦрмирнНрмдрнБред",
        'english': "ЁЯТб Remember: Timely vaccination is very important. Keep vaccination card with you.",
        'hindi': "ЁЯТб рдпрд╛рдж рд░рдЦреЗрдВ: рд╕рдордп рдкрд░ рдЯреАрдХрд╛рдХрд░рдг рдмрд╣реБрдд рдЬрд░реВрд░реА рд╣реИред рдЯреАрдХрд╛рдХрд░рдг рдХрд╛рд░реНрдб рдЕрдкрдиреЗ рд╕рд╛рде рд░рдЦреЗрдВред"
    }
    return reminders.get(language, reminders['english'])

def get_available_vaccines():
    """Return list of available vaccines"""
    vaccines, _ = load_vaccine_data()
    return [v for v in vaccines.keys() if v != 'complete_schedule']
