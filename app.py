from flask import Flask, request, jsonify
import json
import os
from utils.disease_handler import get_disease_info, detect_language as detect_lang_disease
from utils.vaccine_handler import get_vaccine_info, get_vaccination_reminder
from utils.language_utils import (
    detect_language, 
    get_language_from_dialogflow, 
    normalize_disease_name, 
    normalize_vaccine_name,
    get_greeting_response,
    extract_temperature
)

app = Flask(__name__)

@app.route('/', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'message': 'Healthcare Chatbot API is running',
        'supported_languages': ['odia', 'english', 'hindi'],
        'supported_diseases': ['fever', 'cold', 'malaria', 'dengue'],
        'supported_vaccines': ['bcg', 'opv', 'dpt', 'measles', 'hepatitis_b']
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Main webhook endpoint for Dialogflow"""
    try:
        # Get request data from Dialogflow
        req = request.get_json()
        
        if not req:
            return jsonify({'fulfillmentText': 'Invalid request'})
        
        # Extract key information
        intent_name = req.get('queryResult', {}).get('intent', {}).get('displayName', '')
        parameters = req.get('queryResult', {}).get('parameters', {})
        query_text = req.get('queryResult', {}).get('queryText', '')
        
        print(f"Intent: {intent_name}")
        print(f"Parameters: {parameters}")
        print(f"Query: {query_text}")
        
        # Detect language
        language = detect_language(query_text)
        dialogflow_lang = get_language_from_dialogflow(parameters)
        if dialogflow_lang != 'english':
            language = dialogflow_lang
        
        print(f"Detected Language: {language}")
        
        # Process based on intent
        response_text = process_intent(intent_name, parameters, query_text, language)
        
        return jsonify({
            'fulfillmentText': response_text
        })
        
    except Exception as e:
        print(f"Webhook error: {str(e)}")
        error_responses = {
            'odia': '‡¨¶‡≠Å‡¨É‡¨ñ‡¨ø‡¨§, ‡¨ï‡¨ø‡¨õ‡¨ø ‡¨∏‡¨Æ‡¨∏‡≠ç‡≠ü‡¨æ ‡¨π‡≠ã‡¨á‡¨õ‡¨ø‡•§ ‡¨™‡≠Å‡¨£‡¨ø ‡¨ö‡≠á‡¨∑‡≠ç‡¨ü‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§',
            'english': 'Sorry, something went wrong. Please try again.',
            'hindi': '‡§ñ‡•Å‡§∂‡•Ä, ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§'
        }
        return jsonify({
            'fulfillmentText': error_responses.get('english')
        })

def process_intent(intent_name, parameters, query_text, language):
    """Process different intents and return appropriate response"""
    
    # Default Welcome Intent
    if intent_name in ['Default Welcome Intent', 'welcome', 'greeting']:
        return get_greeting_response(language)
    
    # Disease Information Intent
    elif intent_name in ['disease_info', 'disease.info', 'get_disease_info']:
        disease_name = parameters.get('disease', '')
        if not disease_name:
            # Try to extract disease from query text
            disease_name = extract_disease_from_query(query_text)
        
        normalized_disease = normalize_disease_name(disease_name)
        return get_disease_info(normalized_disease, language, query_text)
    
    # Vaccination Intent
    elif intent_name in ['vaccine_info', 'vaccination', 'get_vaccine_info']:
        vaccine_name = parameters.get('vaccine', '')
        if not vaccine_name:
            # Check for baby/schedule keywords
            if any(word in query_text.lower() for word in ['baby', '‡§¨‡§ö‡•ç‡§ö‡§æ', '‡¨¨‡¨æ‡¨ö‡≠ç‡¨ö‡¨æ', 'schedule', '‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤', '‡¨ï‡¨æ‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü‡¨∏‡≠Ç‡¨ö‡≠Ä']):
                vaccine_name = 'complete'
        
        normalized_vaccine = normalize_vaccine_name(vaccine_name)
        return get_vaccine_info(normalized_vaccine, language)
    
    # Emergency Intent
    elif intent_name in ['emergency', 'urgent_help', 'emergency_help']:
        return handle_emergency(query_text, language)
    
    # General Health Intent
    elif intent_name in ['general_health', 'health_tips']:
        return get_general_health_tips(language)
    
    # Fallback - try to determine what user wants
    else:
        return handle_fallback(query_text, language)

def extract_disease_from_query(query_text):
    """Extract disease name from user query"""
    disease_keywords = {
        'fever': ['fever', '‡¨ú‡≠ç‡≠±‡¨∞', 'jwara', '‡§¨‡•Å‡§ñ‡§æ‡§∞', 'bukhar', 'temperature', 'temp'],
        'cold': ['cold', '‡¨∂‡¨∞‡≠ç‡¨¶‡¨ø', 'sardi', '‡§∏‡§∞‡•ç‡§¶‡•Ä', 'cough', '‡¨ï‡¨æ‡¨∂', '‡§ñ‡§æ‡§Ç‡§∏‡•Ä'],
        'malaria': ['malaria', '‡¨Æ‡¨≤‡≠á‡¨∞‡¨ø‡¨Ü', '‡§Æ‡§≤‡•á‡§∞‡§ø‡§Ø‡§æ'],
        'dengue': ['dengue', '‡¨°‡≠á‡¨ô‡≠ç‡¨ó‡≠Å', '‡§°‡•á‡§Ç‡§ó‡•Ç']
    }
    
    query_lower = query_text.lower()
    for disease, keywords in disease_keywords.items():
        for keyword in keywords:
            if keyword in query_lower:
                return disease
    
    return None

def handle_emergency(query_text, language):
    """Handle emergency situations"""
    from utils.disease_handler import check_emergency_condition, load_data
    
    # Check for temperature in query
    temp = extract_temperature(query_text)
    if temp and temp >= 103:
        _, phrases = load_data()
        return phrases['emergency_responses']['fever_above_103'][language]
    
    # Check other emergency conditions
    emergency = check_emergency_condition(None, query_text)
    if emergency:
        _, phrases = load_data()
        return phrases['emergency_responses'][emergency][language]
    
    # General emergency response
    emergency_responses = {
        'odia': 'üö® ‡¨ú‡¨∞‡≠Å‡¨∞‡≠Ä‡¨ï‡¨æ‡¨≥‡≠Ä‡¨® ‡¨™‡¨∞‡¨ø‡¨∏‡≠ç‡¨•‡¨ø‡¨§‡¨ø‡¨∞‡≠á ‡¨§‡≠Å‡¨∞‡¨®‡≠ç‡¨§ 108 ‡¨®‡¨Æ‡≠ç‡¨¨‡¨∞‡¨∞‡≠á ‡¨°‡¨æ‡¨ï‡¨®‡≠ç‡¨§‡≠Å ‡¨ï‡¨ø‡¨Æ‡≠ç‡¨¨‡¨æ ‡¨®‡¨ø‡¨ï‡¨ü‡¨∏‡≠ç‡¨• ‡¨ö‡¨ø‡¨ï‡¨ø‡¨§‡≠ç‡¨∏‡¨æ‡¨≥‡≠ü‡¨ï‡≠Å ‡¨Ø‡¨æ‡¨Ü‡¨®‡≠ç‡¨§‡≠Å‡•§',
        'english': 'üö® In emergency, immediately call 108 or visit nearest hospital.',
        'hindi': 'üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§§‡•Å‡§∞‡§Ç‡§§ 108 ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ú‡§æ‡§è‡§Ç‡•§'
    }
    
    return emergency_responses.get(language, emergency_responses['english'])

def get_general_health_tips(language):
    """Get general health tips"""
    tips = {
        'odia': '‡¨∏‡≠Å‡¨∏‡≠ç‡¨• ‡¨∞‡¨π‡¨ø‡¨¨‡¨æ ‡¨™‡¨æ‡¨á‡¨Å:\n‚Ä¢ ‡¨∏‡¨´‡¨æ ‡¨™‡¨æ‡¨£‡¨ø ‡¨™‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å\n‚Ä¢ ‡¨π‡¨æ‡¨§ ‡¨¨‡¨æ‡¨∞‡¨Æ‡≠ç‡¨¨‡¨æ‡¨∞ ‡¨ß‡≠ã‡¨á‡¨®‡≠ç‡¨§‡≠Å\n‚Ä¢ ‡¨∏‡≠Å‡¨∏‡≠ç‡¨• ‡¨ñ‡¨æ‡¨¶‡≠ç‡≠ü ‡¨ñ‡¨æ‡¨Ö‡¨®‡≠ç‡¨§‡≠Å\n‚Ä¢ ‡¨®‡¨ø‡≠ü‡¨Æ‡¨ø‡¨§ ‡¨¨‡≠ç‡≠ü‡¨æ‡≠ü‡¨æ‡¨Æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å\n‚Ä¢ ‡¨™‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü‡¨æ‡¨™‡≠ç‡¨§ ‡¨∂‡≠ã‡¨á‡¨®‡≠ç‡¨§‡≠Å',
        'english': 'To stay healthy:\n‚Ä¢ Drink clean water\n‚Ä¢ Wash hands frequently\n‚Ä¢ Eat healthy food\n‚Ä¢ Exercise regularly\n‚Ä¢ Get adequate sleep',
        'hindi': '‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§∞‡§π‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:\n‚Ä¢ ‡§∏‡§æ‡§´ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç\n‚Ä¢ ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ ‡§π‡§æ‡§• ‡§ß‡•ã‡§è‡§Ç\n‚Ä¢ ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§ñ‡§æ‡§®‡§æ ‡§ñ‡§æ‡§è‡§Ç\n‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§®‡•Ä‡§Ç‡§¶ ‡§≤‡•á‡§Ç'
    }
    
    return tips.get(language, tips['english'])

def handle_fallback(query_text, language):
    """Handle fallback cases when intent is not clear"""
    
    # Check if it's about disease
    disease = extract_disease_from_query(query_text)
    if disease:
        return get_disease_info(disease, language, query_text)
    
    # Check if it's about vaccination
    vaccine_keywords = ['vaccine', '‡§ü‡•Ä‡§ï‡§æ', '‡¨ü‡¨ø‡¨ï‡¨æ', 'vaccination', 'immunization']
    if any(keyword in query_text.lower() for keyword in vaccine_keywords):
        return get_vaccine_info('complete', language)
    
    # General fallback response
    fallback_responses = {
        'odia': '‡¨Æ‡≠Å‡¨Å ‡¨∞‡≠ã‡¨ó (‡¨ú‡≠ç‡≠±‡¨∞, ‡¨∂‡¨∞‡≠ç‡¨¶‡¨ø, ‡¨Æ‡¨≤‡≠á‡¨∞‡¨ø‡¨Ü, ‡¨°‡≠á‡¨ô‡≠ç‡¨ó‡≠Å) ‡¨è‡¨¨‡¨Ç ‡¨ü‡¨ø‡¨ï‡¨æ‡¨ï‡¨∞‡¨£ ‡¨¨‡¨ø‡¨∑‡≠ü‡¨∞‡≠á ‡¨∏‡¨æ‡¨π‡¨æ‡¨Ø‡≠ç‡≠ü ‡¨ï‡¨∞‡¨ø‡¨™‡¨æ‡¨∞‡¨ø‡¨¨‡¨ø‡•§ ‡¨ï‡≠á‡¨Æ‡¨ø‡¨§‡¨ø ‡¨∏‡¨æ‡¨π‡¨æ‡¨Ø‡≠ç‡≠ü ‡¨ï‡¨∞‡¨ø‡¨¨‡¨ø?',
        'english': 'I can help with diseases (fever, cold, malaria, dengue) and vaccination information. How can I help you?',
        'hindi': '‡§Æ‡•à‡§Ç ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç (‡§¨‡•Å‡§ñ‡§æ‡§∞, ‡§∏‡§∞‡•ç‡§¶‡•Ä, ‡§Æ‡§≤‡•á‡§∞‡§ø‡§Ø‡§æ, ‡§°‡•á‡§Ç‡§ó‡•Ç) ‡§î‡§∞ ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?'
    }
    
    return fallback_responses.get(language, fallback_responses['english'])

@app.route('/test', methods=['GET', 'POST'])
def test_endpoint():
    """Test endpoint for manual testing"""
    if request.method == 'GET':
        return '''
        <html>
        <body>
            <h2>Healthcare Chatbot Test</h2>
            <form method="POST">
                <label>Query:</label><br>
                <input type="text" name="query" style="width:300px" placeholder="Ask about fever, vaccines, etc."><br><br>
                <label>Language:</label><br>
                <select name="language">
                    <option value="english">English</option>
                    <option value="odia">Odia</option>
                    <option value="hindi">Hindi</option>
                </select><br><br>
                <input type="submit" value="Test">
            </form>
        </body>
        </html>
        '''
    
    # POST request - process test query
    query = request.form.get('query', '')
    language = request.form.get('language', 'english')
    
    # Simulate Dialogflow request
    mock_intent = 'test'
    mock_parameters = {}
    
    # Determine intent based on query
    if any(word in query.lower() for word in ['fever', '‡¨ú‡≠ç‡≠±‡¨∞', '‡§¨‡•Å‡§ñ‡§æ‡§∞']):
        mock_intent = 'disease_info'
        mock_parameters['disease'] = 'fever'
    elif any(word in query.lower() for word in ['vaccine', '‡¨ü‡¨ø‡¨ï‡¨æ', '‡§ü‡•Ä‡§ï‡§æ']):
        mock_intent = 'vaccine_info'
    
    response = process_intent(mock_intent, mock_parameters, query, language)
    
    return f'''
    <html>
    <body>
        <h2>Test Result</h2>
        <p><strong>Query:</strong> {query}</p>
        <p><strong>Language:</strong> {language}</p>
        <p><strong>Response:</strong></p>
        <pre>{response}</pre>
        <br>
        <a href="/test">Test Again</a>
    </body>
    </html>
    '''

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True)
